// Mocks generated by Mockito 5.4.6 from annotations
// in cribe/test/ui/home/widgets/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:cribe/core/constants/feature_flags.dart' as _i11;
import 'package:cribe/core/constants/storage_keys.dart' as _i9;
import 'package:cribe/core/constants/ui_state.dart' as _i4;
import 'package:cribe/core/logger/logger_mixins.dart' as _i2;
import 'package:cribe/data/providers/feature_flags_provider.dart' as _i10;
import 'package:cribe/data/services/storage_service.dart' as _i8;
import 'package:cribe/ui/home/view_models/home_view_model.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeContextualLogger_0 extends _i1.SmartFake
    implements _i2.ContextualLogger {
  _FakeContextualLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeViewModel extends _i1.Mock implements _i3.HomeViewModel {
  MockHomeViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UiState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i4.UiState.initial,
      ) as _i4.UiState);

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i2.ContextualLogger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeContextualLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.ContextualLogger);

  @override
  _i6.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoading(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setLoading,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setError(String? value) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i8.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ContextualLogger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeContextualLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.ContextualLogger);

  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  String getValue(_i9.StorageKey? key) => (super.noSuchMethod(
        Invocation.method(
          #getValue,
          [key],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getValue,
            [key],
          ),
        ),
      ) as String);

  @override
  _i6.Future<String> getSecureValue(_i9.SecureStorageKey? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSecureValue,
          [key],
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getSecureValue,
            [key],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<bool> setSecureValue(
    _i9.SecureStorageKey? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSecureValue,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setValue(
    _i9.StorageKey? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setValue,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [FeatureFlagsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeatureFlagsProvider extends _i1.Mock
    implements _i10.FeatureFlagsProvider {
  MockFeatureFlagsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i2.ContextualLogger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeContextualLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.ContextualLogger);

  @override
  T getFlag<T>(_i11.FeatureFlagKey? key) => (super.noSuchMethod(
        Invocation.method(
          #getFlag,
          [key],
        ),
        returnValue: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #getFlag,
            [key],
          ),
        ),
      ) as T);

  @override
  void setFlag<T>(
    _i11.FeatureFlagKey? key,
    T? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setFlag,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetToDefaults() => super.noSuchMethod(
        Invocation.method(
          #resetToDefaults,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> getAllFlags() => (super.noSuchMethod(
        Invocation.method(
          #getAllFlags,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
