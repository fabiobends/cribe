// Mocks generated by Mockito 5.4.6 from annotations
// in cribe/test/ui/auth/view_models/register_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cribe/core/logger/logger_mixins.dart' as _i2;
import 'package:cribe/data/model/auth/login_response.dart' as _i6;
import 'package:cribe/data/model/auth/register_response.dart' as _i7;
import 'package:cribe/data/repositories/auth_repository.dart' as _i4;
import 'package:cribe/data/services/api_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeContextualLogger_0 extends _i1.SmartFake
    implements _i2.ContextualLogger {
  _FakeContextualLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResponse_1<T> extends _i1.SmartFake
    implements _i3.ApiResponse<T> {
  _FakeApiResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i4.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ContextualLogger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeContextualLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.ContextualLogger);

  @override
  _i5.Future<_i3.ApiResponse<_i6.LoginResponse>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i5.Future<_i3.ApiResponse<_i6.LoginResponse>>.value(
            _FakeApiResponse_1<_i6.LoginResponse>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i5.Future<_i3.ApiResponse<_i6.LoginResponse>>);

  @override
  _i5.Future<_i3.ApiResponse<_i7.RegisterResponse>> register(
    String? email,
    String? password,
    String? firstName,
    String? lastName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
            firstName,
            lastName,
          ],
        ),
        returnValue: _i5.Future<_i3.ApiResponse<_i7.RegisterResponse>>.value(
            _FakeApiResponse_1<_i7.RegisterResponse>(
          this,
          Invocation.method(
            #register,
            [
              email,
              password,
              firstName,
              lastName,
            ],
          ),
        )),
      ) as _i5.Future<_i3.ApiResponse<_i7.RegisterResponse>>);

  @override
  _i5.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
